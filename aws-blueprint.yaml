tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml
  - http://www.getcloudify.org/spec/dblb/0.1/plugin.yaml
  - imports/scale.yaml
  - imports/db-lb.yaml

inputs:

  environment_blueprint_filename:
    default: aws-blueprint.yaml

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: { get_attribute: [ ubuntu_trusty_ami, aws_resource_id ] }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  vpc_id:
    description: >
      The ID of the VPC that the VM should be connected to.
    default: { get_secret: vpc_id }

  public_subnet_id:
    description: >
      The ID of the public subnet in vpc_id.
      This subnet should allow elastic IPs and it should also have either a NAT gateway or NAT instance.
    default: { get_secret: public_subnet_id }

  private_subnet_id:
    description: >
      The ID of the private subnet in vpc_id.
      This subnet should have internet routing to a NAT on another subnet.
    default: { get_secret: private_subnet_id }

  availability_zone:
    description: >
      The availability zone where to create the VM, should be in the same availability zone as public_subnet_id.
    default: { get_secret: availability_zone }

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  manager_network:
    default: default

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

    client_config: &client_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      region_name: { get_secret: ec2_region_name }

node_templates:

  drupal:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/install-drupal.sh
        configure:
          implementation: scripts/create-db.py
          inputs: &database_connection
            db_host: { get_attribute: [ mysqldb_endpoint, deployment, outputs, ip ] }
            db_user_name: { get_input: new_database_user }
            db_password: { get_input: new_database_password }
            db_name: { get_input: db_name }
        delete:
          implementation: scripts/delete-db.py
          inputs: *database_connection
    relationships:
    - type: cloudify.relationships.contained_in
      target: apache_vm
    - type: cloudify.relationships.depends_on
      target: mysqldb_endpoint

  apache_vm:
    type: cloudify.aws.nodes.Instance
    properties:
      name: Apache Instance
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      agent_config:
        network: { get_input: manager_network }
        install_method: init_script
        user: { get_input: agent_user }
        port: 22
        key: { get_input: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              block_device_map:
                '/dev/sda1':
                  delete_on_termination: true
              image_id: { get_input: ami }
              placement: { get_input: availability_zone }
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: drupal_security_group
      - type: cloudify.aws.relationships.instance_connected_to_subnet
        target: public_subnet
      - target: apache_ip
        type: cloudify.aws.relationships.instance_connected_to_elastic_ip
      - type: cloudify.relationships.depends_on
        target: ubuntu_trusty_ami

  ubuntu_trusty_ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
          - Name: name
            Values:
            - 'ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-20170727'
          - Name: owner-id
            Values:
            - '099720109477'
      client_config: *client_config

  drupal_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: Security group for Cloudify Manager VM
      rules:
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8080
          to_port: 8080
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8000
          to_port: 8000
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8081
          to_port: 8081
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 22
          to_port: 22
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 80
          to_port: 80
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 3306
          to_port: 3306
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 55672
          to_port: 55672
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 5672
          to_port: 5672
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 53229
          to_port: 53229
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8101
          to_port: 8101
        - ip_protocol: tcp
          cidr_ip: 0.0.0.0/0
          from_port: 8100
          to_port: 8100
    relationships:
      - type: cloudify.aws.relationships.security_group_contained_in_vpc
        target: vpc

  apache_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc
    capabilities:
      scalable:
        properties:
          default_instances: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc

  public_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_id }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  private_subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_id }
      cidr_block:  N/A
      availability_zone:  N/A
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      cidr_block: N/A
    relationships:
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_input: agent_key_public }

outputs:

  endpoint:
    description: My application endpoint
    value:
      drupal_url: { concat: ['http://', { get_attribute: [apache_vm, public_ip_address] },':80' ] }

groups:

  scale_up_group:
    members: [apache_vm]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          default_instances: 1
          policy_operates_on_group: true
          scale_limit: 5
          scale_direction: '<'
          scale_threshold: 40
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                scalable_entity_name: drupal

  scale_down_group:
    members: [apache_vm]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          default_instances: 1
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 20
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                scalable_entity_name: drupal

  apache:
    members: [apache_vm, apache_ip]

policies:
  scale_policy1:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [apache]
