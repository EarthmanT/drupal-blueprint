tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-azure-plugin/1.4.3/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - scale.yaml

inputs:

  resource_prefix:
    default: drp

  resource_suffix:
    default: '0'

  retry_after:
    type: integer
    default: 60

  size:
    default: { get_secret: small_image_size }

  image:
    default:
      publisher: { get_secret: ubuntu_trusty_image_publisher }
      offer: { get_secret: ubuntu_trusty_image_offer }
      sku: { get_secret: ubuntu_trusty_image_sku }
      version: { get_secret: ubuntu_trusty_image_version }

  agent_user:
    description: The user name of the agent on the instance created from the image.
    default: ubuntu

  ssh_public_keys:
    description: the public key
    default:
    - path: {concat:[ '/home/', { get_input: agent_user }, '/.ssh/authorized_keys' ]}
      keyData: { get_secret: agent_key_public }

  docRoot:
    default: /var/www/html

  dbPort:
    default: 3306

  dbBindAddress:
    type: string
    default: '0.0.0.0'

  memcachePort:
    default: 11211

  schemaurl:
    type: string
    default: 'http://repository.cloudifysource.org/org/cloudifysource/examples/drupal/new_babies7.zip'

  drupalImageURL:
    type:
    default: 'http://repository.cloudifysource.org/org/cloudifysource/examples/drupal/babies_image_d7_v2.zip'

dsl_definitions:
  azure_config: &azure_config
    subscription_id: { get_secret: subscription_id }
    tenant_id: { get_secret: tenant_id }
    client_id: { get_secret: client_id }
    client_secret: { get_secret: client_secret }

node_types:

  ###########################################################
  # We define a type that inherits azure's default
  # server, and adds monitoring capabillities on top of it.
  ###########################################################

  host:
    derived_from: cloudify.azure.nodes.compute.VirtualMachine
    properties:
      location:
        default: { get_secret: location }
      retry_after:
        default: { get_input: retry_after }
      os_family:
        default: linux
      azure_config:
        default: *azure_config
      resource_config:
        default:
          hardwareProfile: {}
          storageProfile: {}
          osProfile: {}
      agent_config:
        default:
          user: { get_input: agent_user }
          install_method: remote
          port: 22
          key: { get_secret: agent_key_private }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: pkg.cloudify_azure.resources.compute.virtualmachine.create
          inputs:
            args:
              default:
                hardwareProfile:
                  vmSize: { get_input: size }
                storageProfile:
                  imageReference: { get_input: image}
                osProfile:
                  adminUsername: { get_input: agent_user }
                  adminPassword: ''
                  linuxConfiguration:
                    ssh:
                      publicKeys: { get_input: ssh_public_keys }
                    disablePasswordAuthentication: true
      utils.ops:
        restart_vm_op: utils-scripts/restart_vm.sh
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

  mysql_dbms:
    derived_from: cloudify.nodes.DBMS
    properties:
      port:
        description: MySQL port
        type: integer
      sectionNames:
        description: A command separated list of my.cnf section names
        type: string
      variableNames:
        description: A command separated list of my.cnf variable names
        type: string
      newValues:
        description: A command separated list of my.cnf values for the above variable names
        type: string

  mysql_schema:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      port:
        description: MySQL port
        type: integer
      schemaurl:
        description: schema zip url
        type: string
      query:
        description: Test Query
        type: string

  memcached_db_server:
    derived_from: cloudify.nodes.DBMS
    properties:
      port:
        description: Memcached port
        type: integer

  memcached_application:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      port:
        description: Memcached port
        type: integer
      requiredmemory:
        description: Required memory size in MB
        type: integer

  apache_server:
    derived_from: cloudify.nodes.WebServer
    properties:
      base_port:
        description: Web application port
        type: integer
      needPhp:
        description: Does this application require php
        type: string
      needMemcache:
        description: Does this application require memcache
        type: string
      dbType:
        description: Database type that this application requires
        type: string
      num_instances:
        description: Number of instances
        type: integer
      drupalVersion:
        description: Drupal version
        type: string
      newPort:
        description: Apache port
        type: integer
      docRoot:
        description: docRoot of the Apache
        type: string

  drupal_application:
    derived_from: cloudify.nodes.ApplicationModule
    properties:
      drupalImageURL:
        description: Drupal image zip URL
        type: string
      app_name:
        description: Application name
        type: string
      dbName:
        description: Database name
        type: string
      dbUserName:
        description: DB user name
        type: string
      dbUserPassword:
        description: DB user password
        type: string
      docRoot:
        description: docRoot of the Drupal
        type: string

relationships:

  drupal_server_connected_to_mysql_database:
    derived_from: cloudify.relationships.connected_to

  drupal_app_connected_to_mysql_drupal_schema:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        postconfigure: drupal-scripts/configure-mysql-drupal.sh
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        postconfigure: mysql-scripts/configure-mysql-schema.sh

  drupal_app_connected_to_memcached_app:
    derived_from: cloudify.relationships.connected_to
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        establish: drupal-scripts/configure-memcached-drupal.sh

node_templates:

  mysql_database:
    type: mysql_dbms
    properties:
      port: { get_input: dbPort }
      sectionNames: mysqld
      variableNames: bind-address
      newValues: 0.0.0.0
    interfaces:
      cloudify.interfaces.lifecycle:
        create: mysql-scripts/install-mysql-aws.sh
        start: mysql-scripts/start-mysql.sh
        stop: mysql-scripts/stop-mysql.sh
    relationships:
      - target: mysql_vm
        type: cloudify.relationships.contained_in

  mysql_drupal_schema:
    type: mysql_schema
    properties:
      port: { get_input: dbPort }
      query: select name,mail from users
      schemaurl: { get_input: schemaurl }
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: mysql-scripts/configure-mysql-schema.sh
      cloudify.interfaces.monitoring:
         start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
               collectors_config:
                  MySQLCollector:
                     config:
                        enabled: True
                        hosts: "admin:123@localhost:3306/mydrupaldb"
    relationships:
      - target: mysql_database
        type: cloudify.relationships.contained_in

  memcached_server:
    type: memcached_db_server
    properties:
      port: { get_input: memcachePort }
    interfaces:
      cloudify.interfaces.lifecycle:
        create: memcached-scripts/install-memcached.sh
        configure: memcached-scripts/configure-memcached.sh
    relationships:
      - target: memcached_vm
        type: cloudify.relationships.contained_in

  memcached_app:
    type: memcached_application
    properties:
      port: { get_input: memcachePort }
      requiredmemory: 1000
    interfaces:
      cloudify.interfaces.lifecycle:
        start: memcached-scripts/start-memcached.sh
        stop: memcached-scripts/stop-memcached.sh
    relationships:
      - target: memcached_server
        type: cloudify.relationships.contained_in

  drupal_server:
    type: apache_server
    properties:
      base_port: 8080
      num_instances: 1
      needPhp: yesplease
      needMemcache: yesplease
      dbType: mysql
      drupalVersion: 7
      newPort: 80
      docRoot: { get_input: docRoot }
    interfaces:
      cloudify.interfaces.lifecycle:
        create: apache-scripts/install-apache.sh
    relationships:
      - type: cloudify.relationships.contained_in
        target: apache_vm
      - type: drupal_server_connected_to_mysql_database
        target: mysql_database

  drupal_app:
    type: drupal_application
    properties:
      docRoot: { get_input: docRoot }
      drupalImageURL: { get_input: drupalImageURL }
      app_name: My drupal web server
      dbName: mydrupaldb
      dbUserName: admin
      dbUserPassword: 123
    interfaces:
      cloudify.interfaces.lifecycle:
        start: apache-scripts/start-apache.sh
        stop: apache-scripts/stop-apache.sh
      drupal.interfaces.action:
        install_project: drupal-scripts/drush-install.sh
        set_variable: drupal-scripts/drush-setvar.sh

    relationships:
      - type: cloudify.relationships.contained_in
        target: drupal_server
      - type: drupal_app_connected_to_memcached_app
        target: memcached_app
      - type: drupal_app_connected_to_mysql_drupal_schema
        target: mysql_drupal_schema

  apache_vm:
    type: host
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: apache_nic

  mysql_vm:
    type: host
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: mysql_nic

  memcached_vm:
    type: host
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.connected_to_storage_account
      target: storage_account
    - type: cloudify.azure.relationships.connected_to_availability_set
      target: availability_set
    - type: cloudify.azure.relationships.connected_to_nic
      target: memcached_nic

  drupal_security_group:
    type: cloudify.azure.nodes.network.NetworkSecurityGroup
    properties:
      name: {concat:[{get_input: resource_prefix},nsg,{get_input: resource_suffix}]}
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        securityRules:
        - name: drup_ssh
          properties:
            description: SSH access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 22
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 102
            access: Allow
            direction: Inbound
        - name: drup_http
          properties:
            description: HTTP access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 80
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 103
            access: Allow
            direction: Inbound
        - name: drup_httpb
          properties:
            description: HTTP Access B
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 8080
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 1030
            access: Allow
            direction: Inbound
        - name: drup_httpc
          properties:
            description: HTTP Access C
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 8000
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 1031
            access: Allow
            direction: Inbound
        - name: drup_mysql
          properties:
            description: MySQL access
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 3306
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 104
            access: Allow
            direction: Inbound
        - name: cfy_rabbitb
          properties:
            description: Cloudify RabbitMQ B
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 55672
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 105
            access: Allow
            direction: Inbound
        - name: cfy_rabbit
          properties:
            description: Cloudify RabbitMQ
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange: 5672
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 106
            access: Allow
            direction: Inbound
        - name: cfy_filesrv
          properties:
            description: Cloudify File Server
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange:  53229
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 107
            access: Allow
            direction: Inbound
        - name: cfy_agent
          properties:
            description: Cloudify Agent Rest API
            protocol: Tcp
            sourcePortRange: '*'
            destinationPortRange:  8101
            sourceAddressPrefix: '*'
            destinationAddressPrefix: '*'
            priority: 108
            access: Allow
            direction: Inbound
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  availability_set:
    type: cloudify.azure.nodes.compute.AvailabilitySet
    properties:
      name: {concat:[{get_input: resource_prefix},availset,{get_input: resource_suffix}]}
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  mysql_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: drupal_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: mysql_nic_ip_config

  memcached_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: drupal_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: memcached_nic_ip_config

  apache_nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group
    - type: cloudify.azure.relationships.nic_connected_to_network_security_group
      target: drupal_security_group
    - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
      target: apache_nic_ip_config

  mysql_nic_ip_config:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet

  memcached_nic_ip_config:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet

  apache_nic_ip_config:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
    - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
      target: subnet
    - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
      target: apache_ip

  apache_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        publicIPAllocationMethod: Static
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  subnet:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      resource_group_name: { get_secret: mgr_resource_group_name }
      name: { get_secret: mgr_subnet_name }
      azure_config: *azure_config
      use_external_resource: true
      location: { get_secret: location }
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: virtual_network

  virtual_network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      resource_group_name: { get_secret: mgr_resource_group_name }
      name: { get_secret: mgr_virtual_network_name }
      azure_config: *azure_config
      use_external_resource: true
      location: { get_secret: location }
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      location: { get_secret: location }
      azure_config: *azure_config
      retry_after: { get_input: retry_after }
      resource_config:
        accountType: Standard_LRS
    relationships:
    - type: cloudify.azure.relationships.contained_in_resource_group
      target: resource_group

  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      name: {concat:[{get_input: resource_prefix},arg,{get_input: resource_suffix}]}
      location: { get_secret: location }
      azure_config: *azure_config

plugins:

   drush-plugin:
      executor: central_deployment_agent
      source: drush-plugin

   utils-plugin:
      executor: central_deployment_agent
      source: utils-plugin

workflows:

   restart_vms:
      mapping: utils-plugin.vms.tasks.restart_vms
      parameters:
        node_id:
          description: The node id whose instance will be restarted
        node_instance_id:
          description: The node instance id which will be restarted - default(null) = All instances...
          default: null
        my_input:
          description: Additional input
          default: null

   drush_install:
      mapping: drush-plugin.drush.tasks.install_project
      parameters:
         project_name: {}

   drush_setvar:
      mapping: drush-plugin.drush.tasks.set_variable
      parameters:
         variable_name:
           default: theme_default
         variable_value: {}

outputs:

  endpoint:
    description: Web application endpoint
    value:
      drupal_url: { concat: ['http://', { get_attribute: [apache_vm, public_ip] },':', { get_property: [drupal_server, newPort] }] }

groups:

  scale_up_group:
    members: [apache_vm]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          default_instances: 1
          # If there is more than one member and policy_operates_on_group is set to true,
          # then the threshold is checked against the SUM of all the relevant metrics from all the memebers.
          # E.g.:
          #  policy_operates_on_group is set to true and the members are aaa,bbb and ccc
          #  threshold is 10
          # aaa has 3, bbb has 4 and ccc is 5, then together they are more than 10 , hence the threshold will be breached.
          # if policy_operates_on_group is set to false, then if and only if at least one of them (aaa,bbb or ccc) is greater than 10, the threshold will be breached.
          policy_operates_on_group: true
          scale_limit: 5
          scale_direction: '<'
          scale_threshold: 40
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                scalable_entity_name: apache
                # scale_compute: true

  scale_down_group:
    members: [apache_vm]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          default_instances: 1
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 20
          service_selector: .*apache_vm.*.cpu.total.user
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                scalable_entity_name: apache
                # scale_compute: true

  heal_group:
    members: [memcached_vm]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service: ['cpu.total.user']
            #- .*memcached-vm.*.cpu.total.user
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }

  apache:
    members: [apache_vm, apache_ip]

policies:
  scale_policy1:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
    targets: [apache]
